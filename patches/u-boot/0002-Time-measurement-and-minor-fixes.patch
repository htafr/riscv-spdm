From 0b91e5f09b8b8254614acca24ddde25fd9da5983 Mon Sep 17 00:00:00 2001
From: offreitas <offreitas@outlook.com>
Date: Tue, 5 Dec 2023 21:26:44 -0300
Subject: [PATCH 2/2] Time measurement and minor fixes

---
 Kconfig                     |   5 +
 drivers/virtio/virtio_blk.c | 282 ++++++++++++++++++------------------
 2 files changed, 149 insertions(+), 138 deletions(-)

diff --git a/Kconfig b/Kconfig
index 0e7c4e9e64..4dd72a0375 100644
--- a/Kconfig
+++ b/Kconfig
@@ -590,6 +590,11 @@ config SPDM
 	help
 		This enables SPDM to verify virtio block devices.
 
+config SPDM_DEBUG
+	bool "Enable SPDM debug"
+	help
+		This enables SPDM debug, so exchanged messages are visible.
+
 endmenu		# General setup
 
 source "api/Kconfig"
diff --git a/drivers/virtio/virtio_blk.c b/drivers/virtio/virtio_blk.c
index f6795ae3e7..efee8c8c43 100644
--- a/drivers/virtio/virtio_blk.c
+++ b/drivers/virtio/virtio_blk.c
@@ -16,10 +16,12 @@
 #include <virtio_ring.h>
 #include <string.h>
 #include <stdio.h>
+#include <time.h>
+#include <timer.h>
 #include "virtio_blk.h"
 
 #if CONFIG_IS_ENABLED(SPDM)
-#define BLK_SPDM_DEBUG 1
+#define MAX_RESPONSE_PRINT 128
 #include "spdm_virtioblk.h"
 
 // read_responder_public_certificate_chain
@@ -36,10 +38,7 @@ struct virtio_blk_priv {
 	struct virtqueue *vq;
 };
 
-// #if CONFIG_IS_ENABLED(SPDM)
-// #define SPDM_CTX_TO_VIRTIOBLK(spdm_context_ptr) *(struct blk_desc**)((char*)(spdm_context_ptr) + spdm_get_context_size())
-// #endif
-
+#if CONFIG_IS_ENABLED(SPDM)
 static ulong virtio_blk_do_req(struct udevice *dev, u64 sector,
 			       lbaint_t blkcnt, void *buffer, u32 type)
 {
@@ -67,8 +66,8 @@ static ulong virtio_blk_do_req(struct udevice *dev, u64 sector,
 		sgs[num_out + num_in++] = &data_sg;
 
 	sgs[num_out + num_in++] = &status_sg;
-	// log_warning("dev=%s, active=%d, priv=%p, priv->vq=%p\n", dev->name,
-	// 	  device_active(dev), priv, priv->vq);
+	log_debug("dev=%s, active=%d, priv=%p, priv->vq=%p\n", dev->name,
+		  device_active(dev), priv, priv->vq);
 
 	ret = virtqueue_add(priv->vq, sgs, num_out, num_in);
 	if (ret)
@@ -76,10 +75,10 @@ static ulong virtio_blk_do_req(struct udevice *dev, u64 sector,
 
 	virtqueue_kick(priv->vq);
 
-	// log_warning("wait...");
+	log_debug("wait...");
 	while (!virtqueue_get_buf(priv->vq, NULL))
 		;
-	// log_warning("done\n");
+	log_debug("done\n");
 
 	if (type & VIRTIO_BLK_T_SPDM) {
 		temp_size = * ((u32*) (buffer+1));
@@ -98,11 +97,54 @@ static ulong virtio_blk_do_req(struct udevice *dev, u64 sector,
 		return status == VIRTIO_BLK_S_OK ? blkcnt : -EIO;
 	}
 }
+#else
+static ulong virtio_blk_do_req(struct udevice *dev, u64 sector,
+			       lbaint_t blkcnt, void *buffer, u32 type)
+{
+	struct virtio_blk_priv *priv = dev_get_priv(dev);
+	unsigned int num_out = 0, num_in = 0;
+	struct virtio_sg *sgs[3];
+	u8 status;
+	int ret;
+
+	struct virtio_blk_outhdr out_hdr = {
+		.type = cpu_to_virtio32(dev, type),
+		.sector = cpu_to_virtio64(dev, sector),
+	};
+	struct virtio_sg hdr_sg = { &out_hdr, sizeof(out_hdr) };
+	struct virtio_sg data_sg = { buffer, blkcnt * 512 };
+	struct virtio_sg status_sg = { &status, sizeof(status) };
+
+	sgs[num_out++] = &hdr_sg;
+
+	if (type & VIRTIO_BLK_T_OUT)
+		sgs[num_out++] = &data_sg;
+	else
+		sgs[num_out + num_in++] = &data_sg;
+
+	sgs[num_out + num_in++] = &status_sg;
+	log_debug("dev=%s, active=%d, priv=%p, priv->vq=%p\n", dev->name,
+		  device_active(dev), priv, priv->vq);
+
+	ret = virtqueue_add(priv->vq, sgs, num_out, num_in);
+	if (ret)
+		return ret;
+
+	virtqueue_kick(priv->vq);
+
+	log_debug("wait...");
+	while (!virtqueue_get_buf(priv->vq, NULL))
+		;
+	log_debug("done\n");
+
+	return status == VIRTIO_BLK_S_OK ? blkcnt : -EIO;
+}
+#endif /* CONFIG_IS_ENABLED(SPDM) */
 
 static ulong virtio_blk_read(struct udevice *dev, lbaint_t start,
 			     lbaint_t blkcnt, void *buffer)
 {
-	// log_debug("read %s\n", dev->name);
+	log_debug("read %s\n", dev->name);
 	return virtio_blk_do_req(dev, start, blkcnt, buffer,
 				 VIRTIO_BLK_T_IN);
 }
@@ -148,17 +190,40 @@ static int virtio_blk_bind(struct udevice *dev)
 	return 0;
 }
 
+ulong timer_get_boot_ms(void)
+{
+	u64 ticks = 0;
+	u32 rate = 1;
+	u64 ms;
+	int ret;
+
+	if (!ret) {
+		/* The timer is available */
+		rate = timer_get_rate(gd->timer);
+		timer_get_count(gd->timer, &ticks);
+	} else {
+		return 0;
+	}
+
+	ms = (ticks * 1000) / rate;
+	return ms;
+}
+
 static int virtio_blk_probe(struct udevice *dev)
 {
 	struct virtio_blk_priv *priv = dev_get_priv(dev);
 	struct blk_desc *desc = dev_get_uclass_plat(dev);
 	u64 cap;
 	int ret;
+	ulong elapsed_time;
 #if CONFIG_IS_ENABLED(SPDM)
 	return_status status;
 	boolean use_psk;
 	uint8 heartbeat_period;
 	uint8 measurement_hash[MAX_HASH_SIZE];
+	uint8 number_of_block;
+	uint32 measurement_record_length;
+	uint8 measurement_record[MAX_SPDM_MEASUREMENT_RECORD_SIZE];
 #endif
 
 	ret = virtio_find_vqs(dev, 1, &priv->vq);
@@ -179,36 +244,7 @@ static int virtio_blk_probe(struct udevice *dev)
 	}
 	// hack to be able to access vblk if we only have the context
 	SPDM_CTX_TO_VIRTIOBLK(desc->spdm_context) = desc;
-	/**
-	 * ! HARD CODED
-	 */
-	// buffer = malloc(sizeof(void*)*64);
-	// virtio_blk_do_req(dev, 0, 5, get_version, VIRTIO_BLK_T_SPDM | VIRTIO_BLK_T_OUT);
-	// virtio_blk_do_req(dev, 0, 17, buffer, VIRTIO_BLK_T_SPDM);
-	// for (int i = 0; i < 11; i++) {
-	// 	log_warning("%02X ", ((uint8_t*)buffer)[i+5]);
-	// }
-	// log_warning("\n");
-
-	// virtio_blk_do_req(dev, 0, 13, get_capabilities, VIRTIO_BLK_T_SPDM | VIRTIO_BLK_T_OUT);
-	// virtio_blk_do_req(dev, 0, 18, buffer, VIRTIO_BLK_T_SPDM);
-	// for (int i = 0; i < 13; i++) {
-	// 	log_warning("%02X ", ((uint8_t*)buffer)[i+5]);
-	// }
-	// log_warning("\n");
-
-	// virtio_blk_do_req(dev, 0, 49, get_algorithms, VIRTIO_BLK_T_SPDM | VIRTIO_BLK_T_OUT);
-	// virtio_blk_do_req(dev, 0, 58, buffer, VIRTIO_BLK_T_SPDM);
-	// for (int i = 0; i < 17; i++) {
-	// 	log_warning("%02X ", ((uint8_t*)buffer)[i+5]);
-	// }
-	// log_warning("\n");
-
-	// return spdm_test(desc->spdm_context);
-
-	/**
-	 * ! Nice Way
-	 */
+
 	status = spdm_init_connection(
 		desc->spdm_context,
 		(m_exe_connection & EXE_CONNECTION_VERSION_ONLY) != 0
@@ -217,7 +253,7 @@ static int virtio_blk_probe(struct udevice *dev)
 		log_err("[SPDM @ U-Boot]: Error initializing SPDM connection: 0x%llx.\n", status);
 		goto out_free_spdm;
 	} else {
-		log_warning("[SPDM @ U-Boot]: SPDM connection initialized.\n");
+		log_debug("[SPDM @ U-Boot]: SPDM connection initialized.\n");
 	}
 
 	virtblk_init_spdm_certificates(desc->spdm_context);
@@ -231,7 +267,7 @@ static int virtio_blk_probe(struct udevice *dev)
 			);
 		goto out_free_spdm;
 	} else {
-		log_warning("[SPDM @ U-Boot]: Authenticated via SPDM.\n");
+		log_debug("[SPDM @ U-Boot]: Authenticated via SPDM.\n");
 	}
 
 	use_psk = FALSE;
@@ -247,19 +283,40 @@ static int virtio_blk_probe(struct udevice *dev)
 						measurement_hash
 						);
 	if (RETURN_ERROR(status)) {
-		log_warning("[SPDM @ U-Boot]: Error starting SPDM session 0x%02X.\n", (uint32)status);
+		log_err("[SPDM @ U-Boot]: Error starting SPDM session 0x%02X.\n", (uint32)status);
 		goto out_free_spdm;
 	} else {
-		log_warning("[SPDM @ U-Boot]: Started SPDM session.\n");
+		log_debug("[SPDM @ U-Boot]: Started SPDM session.\n");
+	}
+
+	// Request all measurements at a time
+	measurement_record_length = sizeof(measurement_record);
+	status = spdm_get_measurement(
+						desc->spdm_context,
+						0,
+						SPDM_GET_MEASUREMENTS_REQUEST_ATTRIBUTES_GENERATE_SIGNATURE,
+						SPDM_GET_MEASUREMENTS_REQUEST_MEASUREMENT_OPERATION_ALL_MEASUREMENTS,
+						m_use_slot_id & 0xF,
+						&number_of_block,
+						&measurement_record_length,
+						measurement_record
+						);
+	if (RETURN_ERROR(status)) {
+		log_err("[SPDM @ U-Boot]: Error getting measurements 0x%02X.\n", (uint32)status);
+		goto out_free_spdm;
 	}
 #endif
+	elapsed_time = timer_get_boot_ms();
+	log_warning("[MEASUREMENT] Elapsed time: %lu ms\n", elapsed_time);
 
 	return 0;
 
+#if CONFIG_IS_ENABLED(SPDM)
 out_free_spdm:
 	free(desc->spdm_context);
 out:
 	return status;
+#endif
 }
 
 #if CONFIG_IS_ENABLED(SPDM)
@@ -276,7 +333,7 @@ return_status spdm_virtblk_send_message(
 	if (!desc)
 		return RETURN_DEVICE_ERROR;
 
-#if BLK_SPDM_DEBUG
+#if CONFIG_IS_ENABLED(SPDM_DEBUG)
 	log_warning("[SPDM @ U-Boot]: Sending message of size %llu\n", request_size);
 	for (int i = 0; i < request_size; i++) {
 		log_warning("%02X ", ((uint8_t*)request)[i]);
@@ -296,6 +353,9 @@ return_status spdm_virtblk_receive_message(
 )
 {
 	struct blk_desc *desc;
+#if CONFIG_IS_ENABLED(SPDM_DEBUG)
+	uintn max_print;
+#endif
 
 	desc = SPDM_CTX_TO_VIRTIOBLK(spdm_context);
 	if (!desc)
@@ -303,9 +363,10 @@ return_status spdm_virtblk_receive_message(
 
 	*response_size = virtio_blk_do_req(desc->bdev, 0, *response_size, response, VIRTIO_BLK_T_SPDM | VIRTIO_BLK_T_IN);
 
-#if BLK_SPDM_DEBUG
+#if CONFIG_IS_ENABLED(SPDM_DEBUG)
+	max_print = (*response_size > (uintn)MAX_RESPONSE_PRINT) ? (uintn)MAX_RESPONSE_PRINT : *response_size;
 	log_warning("[SPDM @ U-Boot]: Receiving message of size %llu\n", *response_size);
-	for (uint8_t i = 0; i < 17; i++) {
+	for (uint8_t i = 0; i < (uint8_t)max_print; i++) {
 		log_warning("%02X ", ((uint8_t*)response)[i]);
 	}
 	log_warning("\n\n");
@@ -476,15 +537,11 @@ void virtblk_init_spdm_certificates(void* spdm_context)
 {
 	uint8 index;
 	return_status status;
-	// boolean res;
-	// void *data;
 	uintn data_size;
 	spdm_data_parameter_t parameter;
 	uint8 data8;
 	uint16 data16;
 	uint32 data32;
-	// void *hash;
-	// uintn hash_size;
 
 	zero_mem(&parameter, sizeof(parameter));
 	parameter.location = SPDM_DATA_LOCATION_CONNECTION;
@@ -535,97 +592,51 @@ void virtblk_init_spdm_certificates(void* spdm_context)
 		&data_size);
 	m_use_req_asym_algo = data16;
 
-	// printf("read_responder_public_certificate_chain\n");
 	if ((m_use_slot_id == 0xFF) ||
-	    ((m_use_requester_capability_flags &
-	      SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PUB_KEY_ID_CAP) != 0)) {
-		// res = read_responder_public_certificate_chain(m_use_hash_algo,
-		// 					      m_use_asym_algo,
-		// 					      &data, &data_size,
-		// 					      NULL, NULL);
-		// res = false; // We do not support this use case (public key of the Responder provisioned to the Requester previously)
-		// if (!res) {
-		// 	res = true;
-		// 	data = responder_public_certificate_chain_data;
-		// 	data_size = responder_public_certificate_chain_size;
-		// }
-		// if (res) {
-			zero_mem(&parameter, sizeof(parameter));
-			parameter.location = SPDM_DATA_LOCATION_LOCAL;
-			spdm_set_data(
-				spdm_context,
-				SPDM_DATA_PEER_PUBLIC_CERT_CHAIN,
-				&parameter,
-				responder_public_certificate_chain_data,
-				responder_public_certificate_chain_size
-				);
-			// Do not free it.
-		// }
+		((m_use_requester_capability_flags &
+			SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PUB_KEY_ID_CAP) != 0)) {
+		zero_mem(&parameter, sizeof(parameter));
+		parameter.location = SPDM_DATA_LOCATION_LOCAL;
+		spdm_set_data(
+			spdm_context,
+			SPDM_DATA_PEER_PUBLIC_CERT_CHAIN,
+			&parameter,
+			responder_public_certificate_chain_data,
+			responder_public_certificate_chain_size
+			);
 	} else {
-		// res = read_responder_root_public_certificate_from_system_certificate_list(m_use_hash_algo,
-		// 					     // m_use_asym_algo,
-		// 					     &data, &data_size,
-		// 					     &hash, &hash_size);
-		// res = read_responder_root_public_certificate(m_use_hash_algo,
-		// 					     m_use_asym_algo,
-		// 					     &data, &data_size,
-		// 					     &hash, &hash_size);
-		// if (!res) {
-		// 	res = true;
-		// 	hash = responder_public_certificate_chain_hash;
-		// 	hash_size = responder_public_certificate_chain_hash_size;
-		// }
-		// if (res) {
-			zero_mem(&parameter, sizeof(parameter));
-			parameter.location = SPDM_DATA_LOCATION_LOCAL;
-			spdm_set_data(
-				spdm_context,
-				SPDM_DATA_PEER_PUBLIC_ROOT_CERT_HASH,
-				&parameter,
-				responder_public_certificate_chain_hash,
-				responder_public_certificate_chain_hash_size
-				);
-			// Do not free it.
-		// }
-	}
-
-	// res = read_requester_public_certificate_chain(m_use_hash_algo,
-	// 					      m_use_req_asym_algo,
-	// 					      &data, &data_size, NULL,
-	// 					      NULL);
-	// res = false; // The requester public certifiate chain is only needed if mutual authentication is enabled
-
-	// if (!res) {
-	// 	res = true;
-	// 	data = requester_public_certificate_chain_data;
-	// 	data_size = requester_public_certificate_chain_size;
-	// }
-
-	// if (res) {
 		zero_mem(&parameter, sizeof(parameter));
 		parameter.location = SPDM_DATA_LOCATION_LOCAL;
-		data8 = m_use_slot_count;
 		spdm_set_data(
 			spdm_context,
-			SPDM_DATA_LOCAL_SLOT_COUNT,
+			SPDM_DATA_PEER_PUBLIC_ROOT_CERT_HASH,
 			&parameter,
-			&data8,
-			sizeof(data8)
+			responder_public_certificate_chain_hash,
+			responder_public_certificate_chain_hash_size
 			);
+	}
 
-		for (index = 0; index < m_use_slot_count; index++) {
-			parameter.additional_data[0] = index;
-			spdm_set_data(
-				spdm_context,
-				SPDM_DATA_LOCAL_PUBLIC_CERT_CHAIN,
-				&parameter,
-				requester_public_certificate_chain_data,
-				requester_public_certificate_chain_size
-				);
-		}
-		// printf("read_requester_public_certificate_chain\n");
-		// do not free it
-	// }
+	zero_mem(&parameter, sizeof(parameter));
+	parameter.location = SPDM_DATA_LOCATION_LOCAL;
+	data8 = m_use_slot_count;
+	spdm_set_data(
+		spdm_context,
+		SPDM_DATA_LOCAL_SLOT_COUNT,
+		&parameter,
+		&data8,
+		sizeof(data8)
+		);
+
+	for (index = 0; index < m_use_slot_count; index++) {
+		parameter.additional_data[0] = index;
+		spdm_set_data(
+			spdm_context,
+			SPDM_DATA_LOCAL_PUBLIC_CERT_CHAIN,
+			&parameter,
+			requester_public_certificate_chain_data,
+			requester_public_certificate_chain_size
+			);
+	}
 
 	status = spdm_set_data(
 		spdm_context,
@@ -679,7 +690,6 @@ spdm_authentication(
 	OUT 		void 		*measurement_hash)
 {
 	return_status status;
-	spdm_context_t *spdm_context;
 
 	if ((m_exe_connection & EXE_CONNECTION_DIGEST) != 0) {
 		status = spdm_get_digest(
@@ -729,12 +739,8 @@ spdm_authentication(
 return_status do_authentication_via_spdm(void* spdm_context)
 {
 	return_status status = RETURN_SUCCESS;
-	// void *spdm_context;
 	uint8 slot_mask;
-	// uint8 total_digest_buffer[MAX_HASH_SIZE * MAX_SPDM_SLOT_COUNT];
-	// uint8 measurement_hash[MAX_HASH_SIZE];
 	uintn cert_chain_size;
-	// uint8 cert_chain[MAX_SPDM_CERT_CHAIN_SIZE];
 	uint8 *cert_chain;
 	uint8 *total_digest_buffer;
 	uint8 *measurement_hash;
-- 
2.42.0

